/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-api-proxy/file/dbus/v1/system/org.deepin.dde.Network1.xml -a ./dde-api-proxy/toolGenerate/qdbusxml2cpp/org.deepin.dde.Network1Adaptor -i ./dde-api-proxy/toolGenerate/qdbusxml2cpp/org.deepin.dde.Network1.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-api-proxy/toolGenerate/qdbusxml2cpp/org.deepin.dde.Network1Adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class Network1Adaptor
 */

Network1Adaptor::Network1Adaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

Network1Adaptor::~Network1Adaptor()
{
    // destructor
}

bool Network1Adaptor::vpnEnabled() const
{
    // get the value of property VpnEnabled
    return qvariant_cast< bool >(parent()->property("VpnEnabled"));
}

void Network1Adaptor::setVpnEnabled(bool value)
{
    // set the value of property VpnEnabled
    parent()->setProperty("VpnEnabled", QVariant::fromValue(value));
}

QDBusObjectPath Network1Adaptor::EnableDevice(const QString &pathOrIface, bool enabled)
{
    // handle method call org.deepin.dde.Network1.EnableDevice
    QDBusObjectPath cpath;
    QMetaObject::invokeMethod(parent(), "EnableDevice", Q_RETURN_ARG(QDBusObjectPath, cpath), Q_ARG(QString, pathOrIface), Q_ARG(bool, enabled));
    return cpath;
}

bool Network1Adaptor::IsDeviceEnabled(const QString &pathOrIface)
{
    // handle method call org.deepin.dde.Network1.IsDeviceEnabled
    bool enabled;
    QMetaObject::invokeMethod(parent(), "IsDeviceEnabled", Q_RETURN_ARG(bool, enabled), Q_ARG(QString, pathOrIface));
    return enabled;
}

void Network1Adaptor::Ping(const QString &host)
{
    // handle method call org.deepin.dde.Network1.Ping
    QMetaObject::invokeMethod(parent(), "Ping", Q_ARG(QString, host));
}

bool Network1Adaptor::ToggleWirelessEnabled()
{
    // handle method call org.deepin.dde.Network1.ToggleWirelessEnabled
    bool enabled;
    QMetaObject::invokeMethod(parent(), "ToggleWirelessEnabled", Q_RETURN_ARG(bool, enabled));
    return enabled;
}

