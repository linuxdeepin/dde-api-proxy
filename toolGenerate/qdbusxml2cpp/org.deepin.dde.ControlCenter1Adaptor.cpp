/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-api-proxy/file/dbus/v1/session/org.deepin.dde.ControlCenter1.xml -a ./dde-api-proxy/toolGenerate/qdbusxml2cpp/org.deepin.dde.ControlCenter1Adaptor -i ./dde-api-proxy/toolGenerate/qdbusxml2cpp/org.deepin.dde.ControlCenter1.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-api-proxy/toolGenerate/qdbusxml2cpp/org.deepin.dde.ControlCenter1Adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class ControlCenter1Adaptor
 */

ControlCenter1Adaptor::ControlCenter1Adaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ControlCenter1Adaptor::~ControlCenter1Adaptor()
{
    // destructor
}

ControlCenterRect ControlCenter1Adaptor::rect() const
{
    // get the value of property Rect
    return qvariant_cast< ControlCenterRect >(parent()->property("Rect"));
}

bool ControlCenter1Adaptor::showInRight() const
{
    // get the value of property ShowInRight
    return qvariant_cast< bool >(parent()->property("ShowInRight"));
}

void ControlCenter1Adaptor::Hide()
{
    // handle method call org.deepin.dde.ControlCenter1.Hide
    QMetaObject::invokeMethod(parent(), "Hide");
}

void ControlCenter1Adaptor::HideImmediately()
{
    // handle method call org.deepin.dde.ControlCenter1.HideImmediately
    QMetaObject::invokeMethod(parent(), "HideImmediately");
}

void ControlCenter1Adaptor::SetAutoHide(bool autoHide)
{
    // handle method call org.deepin.dde.ControlCenter1.SetAutoHide
    QMetaObject::invokeMethod(parent(), "SetAutoHide", Q_ARG(bool, autoHide));
}

void ControlCenter1Adaptor::Show()
{
    // handle method call org.deepin.dde.ControlCenter1.Show
    QMetaObject::invokeMethod(parent(), "Show");
}

void ControlCenter1Adaptor::ShowHome()
{
    // handle method call org.deepin.dde.ControlCenter1.ShowHome
    QMetaObject::invokeMethod(parent(), "ShowHome");
}

void ControlCenter1Adaptor::ShowImmediately()
{
    // handle method call org.deepin.dde.ControlCenter1.ShowImmediately
    QMetaObject::invokeMethod(parent(), "ShowImmediately");
}

void ControlCenter1Adaptor::ShowModule(const QString &module)
{
    // handle method call org.deepin.dde.ControlCenter1.ShowModule
    QMetaObject::invokeMethod(parent(), "ShowModule", Q_ARG(QString, module));
}

void ControlCenter1Adaptor::ShowPage(const QString &module, const QString &page)
{
    // handle method call org.deepin.dde.ControlCenter1.ShowPage
    QMetaObject::invokeMethod(parent(), "ShowPage", Q_ARG(QString, module), Q_ARG(QString, page));
}

void ControlCenter1Adaptor::Toggle()
{
    // handle method call org.deepin.dde.ControlCenter1.Toggle
    QMetaObject::invokeMethod(parent(), "Toggle");
}

void ControlCenter1Adaptor::ToggleInLeft()
{
    // handle method call org.deepin.dde.ControlCenter1.ToggleInLeft
    QMetaObject::invokeMethod(parent(), "ToggleInLeft");
}

bool ControlCenter1Adaptor::isModuleAvailable(const QString &m)
{
    // handle method call org.deepin.dde.ControlCenter1.isModuleAvailable
    bool out0;
    QMetaObject::invokeMethod(parent(), "isModuleAvailable", Q_RETURN_ARG(bool, out0), Q_ARG(QString, m));
    return out0;
}

bool ControlCenter1Adaptor::isNetworkCanShowPassword()
{
    // handle method call org.deepin.dde.ControlCenter1.isNetworkCanShowPassword
    bool out0;
    QMetaObject::invokeMethod(parent(), "isNetworkCanShowPassword", Q_RETURN_ARG(bool, out0));
    return out0;
}

