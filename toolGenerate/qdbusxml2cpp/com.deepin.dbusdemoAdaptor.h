/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-api-proxy/file/dbus/v0/session/com.deepin.dbusdemo.xml -a ./dde-api-proxy/toolGenerate/qdbusxml2cpp/com.deepin.dbusdemoAdaptor -i ./dde-api-proxy/toolGenerate/qdbusxml2cpp/com.deepin.dbusdemo.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef COM_DEEPIN_DBUSDEMOADAPTOR_H
#define COM_DEEPIN_DBUSDEMOADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./dde-api-proxy/toolGenerate/qdbusxml2cpp/com.deepin.dbusdemo.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.dbusdemo
 */
class DbusdemoAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.dbusdemo")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.dbusdemo\">\n"
"    <method name=\"Hello\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"Register\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"      <arg direction=\"out\" type=\"b\" name=\"result\"/>\n"
"    </method>\n"
"    <method name=\"SetArea\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"      <arg direction=\"in\" type=\"a(iiii)\" name=\"area\"/>\n"
"      <arg direction=\"out\" type=\"b\" name=\"result\"/>\n"
"      <annotation value=\"AreaList\" name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
"    </method>\n"
"    <signal name=\"Tick\"/>\n"
"    <signal name=\"Tick2\">\n"
"      <arg type=\"s\" name=\"id\"/>\n"
"    </signal>\n"
"    <signal name=\"AreaTestSig\">\n"
"      <arg type=\"s\" name=\"id\"/>\n"
"      <arg type=\"a(iiii)\" name=\"aaa\"/>\n"
"      <annotation value=\"AreaList\" name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
"    </signal>\n"
"    <property access=\"read\" type=\"b\" name=\"Locked\"/>\n"
"    <property access=\"readwrite\" type=\"u\" name=\"Age\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"    </property>\n"
"    <property access=\"readwrite\" type=\"a(iiii)\" name=\"Areas\">\n"
"      <annotation value=\"const\" name=\"org.freedesktop.DBus.Property.EmitsChangedSignal\"/>\n"
"      <annotation value=\"AreaList\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"o\" name=\"CurrentSessionPath\"/>\n"
"  </interface>\n"
        "")
public:
    DbusdemoAdaptor(QObject *parent);
    virtual ~DbusdemoAdaptor();

public: // PROPERTIES
    Q_PROPERTY(uint Age READ age WRITE setAge)
    uint age() const;
    void setAge(uint value);

    Q_PROPERTY(AreaList Areas READ areas WRITE setAreas)
    AreaList areas() const;
    void setAreas(AreaList value);

    Q_PROPERTY(QDBusObjectPath CurrentSessionPath READ currentSessionPath)
    QDBusObjectPath currentSessionPath() const;

    Q_PROPERTY(bool Locked READ locked)
    bool locked() const;

public Q_SLOTS: // METHODS
    QString Hello();
    bool Register(const QString &id);
    bool SetArea(const QString &id, AreaList area);
Q_SIGNALS: // SIGNALS
    void AreaTestSig(const QString &id, AreaList aaa);
    void Tick();
    void Tick2(const QString &id);
};

#endif
