/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-api-proxy/file/dbus/v1/system/org.deepin.dde.PasswdConf1.xml -a ./dde-api-proxy/toolGenerate/qdbusxml2cpp/org.deepin.dde.PasswdConf1Adaptor -i ./dde-api-proxy/toolGenerate/qdbusxml2cpp/org.deepin.dde.PasswdConf1.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-api-proxy/toolGenerate/qdbusxml2cpp/org.deepin.dde.PasswdConf1Adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class PasswdConf1Adaptor
 */

PasswdConf1Adaptor::PasswdConf1Adaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

PasswdConf1Adaptor::~PasswdConf1Adaptor()
{
    // destructor
}

void PasswdConf1Adaptor::Backup()
{
    // handle method call org.deepin.dde.PasswdConf1.Backup
    QMetaObject::invokeMethod(parent(), "Backup");
}

bool PasswdConf1Adaptor::GetEnabled()
{
    // handle method call org.deepin.dde.PasswdConf1.GetEnabled
    bool enabled;
    QMetaObject::invokeMethod(parent(), "GetEnabled", Q_RETURN_ARG(bool, enabled));
    return enabled;
}

bool PasswdConf1Adaptor::GetFirstLetterUpper()
{
    // handle method call org.deepin.dde.PasswdConf1.GetFirstLetterUpper
    bool enabled;
    QMetaObject::invokeMethod(parent(), "GetFirstLetterUpper", Q_RETURN_ARG(bool, enabled));
    return enabled;
}

int PasswdConf1Adaptor::GetLengthLimit(int &maxLength)
{
    // handle method call org.deepin.dde.PasswdConf1.GetLengthLimit
    //return static_cast<YourObjectType *>(parent())->GetLengthLimit(maxLength);
}

QString PasswdConf1Adaptor::GetValidatePolicy()
{
    // handle method call org.deepin.dde.PasswdConf1.GetValidatePolicy
    QString validatePolicy;
    QMetaObject::invokeMethod(parent(), "GetValidatePolicy", Q_RETURN_ARG(QString, validatePolicy));
    return validatePolicy;
}

int PasswdConf1Adaptor::GetValidateRequired()
{
    // handle method call org.deepin.dde.PasswdConf1.GetValidateRequired
    int validateRequired;
    QMetaObject::invokeMethod(parent(), "GetValidateRequired", Q_RETURN_ARG(int, validateRequired));
    return validateRequired;
}

QString PasswdConf1Adaptor::ReadConfig()
{
    // handle method call org.deepin.dde.PasswdConf1.ReadConfig
    QString data;
    QMetaObject::invokeMethod(parent(), "ReadConfig", Q_RETURN_ARG(QString, data));
    return data;
}

void PasswdConf1Adaptor::Reset()
{
    // handle method call org.deepin.dde.PasswdConf1.Reset
    QMetaObject::invokeMethod(parent(), "Reset");
}

void PasswdConf1Adaptor::SetEnabled(bool enabled)
{
    // handle method call org.deepin.dde.PasswdConf1.SetEnabled
    QMetaObject::invokeMethod(parent(), "SetEnabled", Q_ARG(bool, enabled));
}

void PasswdConf1Adaptor::SetFirstLetterUpper(bool enabled)
{
    // handle method call org.deepin.dde.PasswdConf1.SetFirstLetterUpper
    QMetaObject::invokeMethod(parent(), "SetFirstLetterUpper", Q_ARG(bool, enabled));
}

void PasswdConf1Adaptor::SetLengthLimit(int minLength, int maxLength)
{
    // handle method call org.deepin.dde.PasswdConf1.SetLengthLimit
    QMetaObject::invokeMethod(parent(), "SetLengthLimit", Q_ARG(int, minLength), Q_ARG(int, maxLength));
}

void PasswdConf1Adaptor::SetValidatePolicy(const QString &validatePolicy)
{
    // handle method call org.deepin.dde.PasswdConf1.SetValidatePolicy
    QMetaObject::invokeMethod(parent(), "SetValidatePolicy", Q_ARG(QString, validatePolicy));
}

void PasswdConf1Adaptor::SetValidateRequired(int validateRequired)
{
    // handle method call org.deepin.dde.PasswdConf1.SetValidateRequired
    QMetaObject::invokeMethod(parent(), "SetValidateRequired", Q_ARG(int, validateRequired));
}

void PasswdConf1Adaptor::WriteConfig(const QString &data)
{
    // handle method call org.deepin.dde.PasswdConf1.WriteConfig
    QMetaObject::invokeMethod(parent(), "WriteConfig", Q_ARG(QString, data));
}

